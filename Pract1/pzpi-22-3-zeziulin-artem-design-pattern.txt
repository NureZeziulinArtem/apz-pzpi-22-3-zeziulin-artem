МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Факультет комп’ютерних наук
Кафедра програмної інженерії






ЗВІТ
до практичного заняття №1 
з дисципліни «Архітектура програмного забезпечення»
На тему: «Патерни проєктування»





                                   Виконав ст. гр ПЗПІ-22-3
                                   Зезюлін Артем Віталійович
                                   
                                   Перевірив
                                   ст. викладач катедри ПІ
                                   Сокорчук Ігор Петрович



Харків 2025

1 ІСТОРІЯ ЗМІН

№ДатаВерсія звітуОпис змін та виправлень104.03.20250.1Створено розділ «Завдання».210.05.20250.1Створено презентацію та програмний код; створено додатки Б та В.405.06.20250.1Створено відеозапис презентації; створено додаток А.510.06.20250.1Створено розділи «Опис Виконаної роботи» та «Висновки»



2 ЗАВДАННЯ
     1. Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ» (із книг: Ґамма, “ООП. Патерни проєктування”, GoF, крім патерна Singletone);
     2. Створити та оформити слайди презентації доповіді;
     3. Створити та опублікувати на YouTube відеозапис доповіді;
     4. Оформити та завантажити на dl.nure.ua звіт до виконаної роботи;
     5. При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua;
     6. Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main;
     7. Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань;
     8. Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub;
     9. Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1.

3 ОПИС ВИКОНАНОЇ РОБОТИ
	Під час виконання практичної роботи розглядалися шаблони проектування загалом, а також, більш детально, шаблон програмування Builder (Будівельник). Було наведено його опис, структуру, переваги, недоліки та приклади реалізації та використання.
     По створеній презентації було записано відеозапис, який було пізніше розміщено на платформі YouTube.

4 ВИСНОВКИ
     В ході виконання практичної роботи було розглянуто шаблон проектування Builder, створено відповідну презентацію та відеозапис по ній.  


ДОДАТОК А
Відеозапис
     
     Відеозапис доповіді на YouTube:
     https://youtu.be/I-wTyUoIaIQ
     Хронологічний опис:
00:00 Вітання 
00:11 Зміст
00:29 Що таке шаблони проєктування 
01:00 Класифікація патернів: породжуючі, структурні, поведінкові 
01:41 Builder: опис, ціль та коли його варто використовувати 
02:50 Структура шаблону Builder 
03:24 Переваги та недоліки шаблону 
04:15 Приклад 1: Створення текстового та HTML-звіту 
05:05 Приклад 2: Створення лабіринту без директора 
05:40 Висновки 
06:10 Завершення


     ДОДАТОК Б
     Слайди презентації


Рисунок Б.1 - Титульний слайд


Рисунок Б.2 - Зміст

Рисунок Б.3 – Вступ: патерни проектування 


Рисунок Б.4 – Вступ: типи патернів проектування 


Рисунок Б.5 – Шаблон проектування Builder 


Рисунок Б.6 – Шаблон проектування Builder: коли використовувати 


Рисунок Б.7 – Шаблон проектування Builder: структура 


Рисунок Б.8 – Шаблон проектування Builder: переваги та недоліки 


Рисунок Б.9 – Builder: перший приклад реалізації (частина 1) 


Рисунок Б.10 – Builder: перший приклад реалізації (частина 2) 

Рисунок Б.11 – Builder: перший приклад реалізації (частина 3) 


Рисунок Б.12 – Builder: перший приклад реалізації (частина 4) 

Рисунок Б.13 – Builder: другий приклад реалізації (частина 1) 


Рисунок Б.14 – Builder: другий приклад реалізації (частина 2) 

Рисунок Б.15 – Builder: другий приклад реалізації (частина 5) 


Рисунок Б.16 – Висновки 

Рисунок Б.17 – Список використаних джерел 


Рисунок Б.18 – Дякую за увагу 


     ДОДАТОК В
     Програмний код прикладів
     
     HtmlReportBuilder.cs
       1  namespace BuilderReport
       2  {
       3      public class HtmlReportBuilder : IReportBuilder
       4      {
       5          private Report _report = new Report();
       6  
       7          public void BuildHeader()
       8          {
       9              _report.Header = "<header><h1>Report Header</h1></header>";
       10          }
       11  
       12          public void BuildBody()
       13          {
       14              _report.Body = "<main><p>This is the body of the report.</p></main>";
       15          }
       16  
       17          public void BuildFooter()
       18          {
       19              _report.Footer = "<footer><p>Report Footer</p></footer>";
       20          }
       21  
       22          public Report GetReport()
       23          {
       24              return _report;
       25          }
       26  
       27          public void Reset()
       28          {
       29              _report = new Report();
       30          }
       31      }
       32  }
     
     
     IReportBuilder.cs
       1  namespace BuilderReport
       2  {
       3      public interface IReportBuilder
       4      {
       5          void Reset();
       6          void BuildHeader();
       7          void BuildBody();
       8          void BuildFooter();
       9          Report GetReport();
       10      }
       11  }
     
     PlainTextReportBuilder.cs
       1  namespace BuilderReport
       2  {
       3      public class PlainTextReportBuilder : IReportBuilder
       4      {
       5          private Report _report = new Report();
       6  
       7          public void BuildHeader()
       8          {
       9              _report.Header = "***** Report Header *****";
       10          }
       11  
       12          public void BuildBody()
       13          {
       14              _report.Body = "This is the body of the report.";
       15          }
       16  
       17          public void BuildFooter()
       18          {
       19              _report.Footer = "***** Report Footer *****";
       20          }
       21  
       22          public Report GetReport()
       23          {
       24              return _report;
       25          }
       26  
       27          public void Reset()
       28          {
       29              _report = new Report();
       30          }
       31      }
       32  }
     
     Program.cs
       1  namespace BuilderReport
       2  {
       3      internal class Program
       4      {
       5          static void Main(string[] args)
       6          {
       7              IReportBuilder plainBuilder = new PlainTextReportBuilder();
       8              var director = new ReportDirector(plainBuilder);
       9              director.Make();
       10              var plainReport = plainBuilder.GetReport();
       11              plainReport.Show();
       12  
       13              Console.WriteLine();
       14  
       15              IReportBuilder htmlBuilder = new HtmlReportBuilder();
       16              director.ChangeBuilder(htmlBuilder);
       17              director.Make();
       18              var htmlReport = htmlBuilder.GetReport();
       19              htmlReport.Show();
       20          }
       21      }
       22  }
     
     Report.cs
       1  namespace BuilderReport
       2  {
       3      public class Report
       4      {
       5          public string Header { get; set; }
       6          public string Body { get; set; }
       7          public string Footer { get; set; }
       8  
       9          public void Show()
       10          {
       11              Console.WriteLine(Header);
       12              Console.WriteLine(Body);
       13              Console.WriteLine(Footer);
       14          }
       15      }
       16  }
     
     ReportDirector.cs
       1  namespace BuilderReport
       2  {
       3      public class ReportDirector
       4      {
       5          private IReportBuilder _builder;
       6  
       7          public ReportDirector(IReportBuilder builder)
       8          {
       9              _builder = builder;
       10          }
       11  
       12          public void ChangeBuilder(IReportBuilder builder)
       13          {
       14              _builder = builder;
       15          }
       16  
       17          public void Make()
       18          {
       19              _builder.BuildHeader();
       20              _builder.BuildBody();
       21              _builder.BuildFooter();
       22          }
       23      }
       24  }
     
     IMazeBuilder.cs
       1  namespace BuilderMaze
       2  {
       3      public interface IMazeBuilder
       4      {
       5          void AddRoom(string roomName);
       6          void AddPath(string fromRoom, string toRoom);
       7          void Reset();
       8          Maze GetMaze();
       9      }
       10  }
     
     Maze.cs
       1  namespace BuilderMaze
       2  {
       3      public class Maze
       4      {
       5          public List<string> Rooms { get; } = new();
       6          public List<string> Paths { get; } = new();
       7  
       8          public void Show()
       9          {
       10              Console.WriteLine("Rooms:");
       11              foreach (var room in Rooms)
       12                  Console.WriteLine($"- {room}");
       13  
       14              Console.WriteLine("Paths:");
       15              foreach (var path in Paths)
       16                  Console.WriteLine($"- {path}");
       17          }
       18      }
       19  }
     
     Program.cs
       1  namespace BuilderMaze
       2  {
       3      internal class Program
       4      {
       5          static void Main(string[] args)
       6          {
       7              IMazeBuilder builder = new SimpleMazeBuilder();
       8  
       9              builder.AddRoom("Entrance");
       10              builder.AddRoom("Hallway");
       11              builder.AddRoom("Treasure Room");
       12              builder.AddPath("Entrance", "Hallway");
       13              builder.AddPath("Hallway", "Treasure Room");
       14  
       15              Maze maze = builder.GetMaze();
       16              maze.Show();
       17          }
       18      }
       19  }
     
     SimpleMazeBuilder.cs
       1  namespace BuilderMaze
       2  {
       3      public class SimpleMazeBuilder : IMazeBuilder
       4      {
       5          private Maze _maze = new();
       6  
       7          public void AddRoom(string roomName)
       8          {
       9              if (!_maze.Rooms.Contains(roomName))
       10              {
       11                  _maze.Rooms.Add(roomName);
       12              }
       13          }
       14  
       15          public void AddPath(string fromRoom, string toRoom)
       16          {
       17              if (_maze.Rooms.Contains(fromRoom) && _maze.Rooms.Contains(toRoom))
       18              {
       19                  _maze.Paths.Add($"{fromRoom} <--> {toRoom}");
       20              }
       21              else
       22              {
       23                  Console.WriteLine($"Cannot create path: one or both rooms do not exist.");
       24              }
       25          }
       26  
       27          public Maze GetMaze()
       28          {
       29              return _maze;
       30          }
       31  
       32          public void Reset()
       33          {
       34              _maze = new();
       35          }
       36      }
       37  }
       
       

2


